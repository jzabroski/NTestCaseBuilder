using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.FSharp.Collections;
using NUnit.Framework;

namespace NTestCaseBuilder.Examples
{
    ///<summary>
    ///  Test fixture for class 'SortingAlgorithmModule'.
    ///</summary>
    [TestFixture]
    public class TestSortingAlgorithm
    {
        ///<summary>
        ///  A test case to apply sorting to. Provides a sequence of integers in some unspecified order
        ///  - may or may not be sorted in ascending order. Some of the integers in the sequence may be
        ///  duplicated; the duplicates may or may not be adjavent to each other.
        ///  The sequence is generated by permuting a sequence of integers that is known by construction
        ///  to be monotonic increasing, with any duplicates arranged into runs of adjacent duplicated
        ///  values. This base sequence is also made available to check the expected results from any sorting
        ///  algorithm.
        ///</summary>
        public class TestCase
        {
            ///<summary>
            ///  Constructor for use by synthesizing factory.
            ///</summary>
            ///<param name = "leastItemInSequence">The lowest value that starts off <cref>OriginalMonotonicIncreasingSequence</cref></param>
            ///<param name = "nonNegativeDeltas">Sequence of non-negative deltas that will be used to build up <cref>OriginalMonotonicIncreasingSequence</cref></param>
            ///<param name = "permutation">A permuatation that is used to shuffle <cref>OriginalMonotonicIncreasingSequence</cref> to give <cref>PermutedSequence</cref></param>
            public TestCase(Int32 leastItemInSequence, IEnumerable<UInt32> nonNegativeDeltas,
                            Permutation<Int32> permutation)
            {
                var originalMonotonicIncreasingSequence = new List<Int32>();

                var runningSum = leastItemInSequence;

                foreach (var nonNegativeDelta in nonNegativeDeltas)
                {
                    originalMonotonicIncreasingSequence.Add(runningSum);
                    runningSum += (Int32) nonNegativeDelta;
                }

                originalMonotonicIncreasingSequence.Add(runningSum);

                OriginalMonotonicIncreasingSequence = originalMonotonicIncreasingSequence;

                PermutedSequence = permutation(originalMonotonicIncreasingSequence);
            }

            ///<summary>
            ///  Parameterless constructor that represents the trivial empty sequence case.
            ///</summary>
            public TestCase()
            {
                OriginalMonotonicIncreasingSequence = new List<Int32>();

                PermutedSequence = new List<Int32>();
            }

            /// <summary>
            ///   The sequence to be used as input to a sorting algorithm.
            /// </summary>
            public IEnumerable<Int32> PermutedSequence { get; set; }

            ///<summary>
            ///  The expected result of sorting <cref>PermutedSequence</cref>.
            ///</summary>
            public IEnumerable<Int32> OriginalMonotonicIncreasingSequence { get; set; }
        }

        private static TypedTestCaseEnumerableFactory<TestCase> BuildTestCaseFactory()
        {
            var factoryForLeastItemInSequence = TestVariableLevelEnumerableFactory.Create(Enumerable.Range(-3, 10));

            const int maximumNumberOfDeltas = 5;

            var factoryForNonNegativeDeltasAndPermutation =
                InterleavedTestCaseEnumerableFactory.Create(
                    from numberOfDeltas in Enumerable.Range(0, 1 + maximumNumberOfDeltas)
                    select BuildNonNegativeDeltasAndPermutationFactory(numberOfDeltas));

            var testCaseFactoryForTrivialCase = SingletonTestCaseEnumerableFactory.Create(new TestCase());

            var testCaseFactoryForNonTrivialCases =
                SynthesizedTestCaseEnumerableFactory.Create(factoryForLeastItemInSequence,
                                                            factoryForNonNegativeDeltasAndPermutation,
                                                            (leastItemInSequence, nonNegativeDeltasAndItsPermutation) =>
                                                            new TestCase(leastItemInSequence,
                                                                         nonNegativeDeltasAndItsPermutation.Item1,
                                                                         nonNegativeDeltasAndItsPermutation.Item2));

            return
                InterleavedTestCaseEnumerableFactory.Create(new[]
                                                                {
                                                                    testCaseFactoryForTrivialCase,
                                                                    testCaseFactoryForNonTrivialCases
                                                                });
        }

        private static TypedTestCaseEnumerableFactory<Tuple<FSharpList<UInt32>, Permutation<Int32>>>
            BuildNonNegativeDeltasAndPermutationFactory(int numberOfDeltas)
        {
            var factoryForNonNegativeDelta =
                TestVariableLevelEnumerableFactory.Create(from signedDelta in Enumerable.Range(0, 5)
                                                          select (UInt32) signedDelta);
            return
                SynthesizedTestCaseEnumerableFactory.CreateWithPermutation<UInt32, Int32>(
                    Enumerable.Repeat(factoryForNonNegativeDelta, numberOfDeltas));
        }

        ///<summary>
        ///  Parameterised unit test for <cref>SortingAlgorithmModule.SortWithBug</cref>.
        ///</summary>
        ///<remarks>
        ///  This is expected to fail.
        ///</remarks>
        ///<param name = "testCase"></param>
        public static void
            ParameterisedUnitTestForReassemblyOfPermutedMonotonicIncreasingSequenceByBuggySortingAlgorithm(
            TestCase testCase)
        {
            Console.WriteLine("[{0}]", String.Join(", ", testCase.PermutedSequence));

            var sortedSequence = SortingAlgorithmModule.SortWithBug(testCase.PermutedSequence);

            Assert.IsTrue(sortedSequence.SequenceEqual(testCase.OriginalMonotonicIncreasingSequence));
        }

        ///<summary>
        ///  Parameterised unit test for <cref>SortingAlgorithmModule.SortThatWorks</cref>.
        ///</summary>
        ///<remarks>
        ///  This is expected to succeed.
        ///</remarks>
        ///<param name = "testCase"></param>
        public static void
            ParameterisedUnitTestForReassemblyOfPermutedMonotonicIncreasingSequenceByCorrectSortingAlgorithm(
            TestCase testCase)
        {
            Console.WriteLine("[{0}]", String.Join(", ", testCase.PermutedSequence));

            var sortedSequence = SortingAlgorithmModule.SortThatWorks(testCase.PermutedSequence);

            Assert.IsTrue(sortedSequence.SequenceEqual(testCase.OriginalMonotonicIncreasingSequence));
        }

        ///<summary>
        ///  Unit test for <cref>SortingAlgorithmModule.SortWithBug</cref>.
        ///</summary>
        [Test]
        public void TestReassemblyOfPermutedMonotonicIncreasingSequenceByBuggySortingAlgorithm()
        {
            var factory = BuildTestCaseFactory();
            const Int32 strength = 3;

            var howManyTestCasesWereExecuted = factory.ExecuteParameterisedUnitTestForAllTypedTestCases(strength,
                                                                                                        ParameterisedUnitTestForReassemblyOfPermutedMonotonicIncreasingSequenceByBuggySortingAlgorithm);

            Console.WriteLine("Executed {0} test cases successfully.", howManyTestCasesWereExecuted);
        }

        ///<summary>
        ///  Unit test for <cref>SortingAlgorithmModule.SortWithBug</cref>.
        ///</summary>
        [Test]
        public void TestReassemblyOfPermutedMonotonicIncreasingSequenceByCorrectSortingAlgorithm()
        {
            var factory = BuildTestCaseFactory();
            const Int32 strength = 3;

            var howManyTestCasesWereExecuted = factory.ExecuteParameterisedUnitTestForAllTypedTestCases(strength,
                                                                                                        ParameterisedUnitTestForReassemblyOfPermutedMonotonicIncreasingSequenceByCorrectSortingAlgorithm);

            Console.WriteLine("Executed {0} test cases successfully.", howManyTestCasesWereExecuted);
        }

        ///<summary>
        ///  Reproduce the test failure from <cref>TestReassemblyOfPermutedMonotonicIncreasingSequenceByBuggySortingAlgorithm</cref>.
        ///</summary>
        [Test]
        public void TestThatQuicklyReproducesTheFailureFromTheBuggyTest()
        {
            const string reproduction =
                "1090764779116129690923515858308014520222336185700694896976936400046940578111983112055989629000774433035533486068550533022050440563660183849064761156304983412948976304159456160212585466378976909594667084684612546801516123636107446692211655819277413780120806759929010140840008697827135115465225616607798809203458367873411691562721979713961882354096770385022200077792300487450154348405290093318086979681653715322405836685434096018833658636229456574555675195151652459428531061508299664931747065365719117850162811281527400091516589637823594429682568955441792069409205208847075572398888233426062315775402870114572803045795914067931365569114275246048311599741894700523864737051672872528802483817110111608686608827458360038103120991531604421775361054167826545150001992292781046335494324154457414668739117309576039346297670079697257524154329550271947777292290537094346736956268948091777903313525345496582149741944782492799103872334616099727795106811667876758170380884887088616986974976625188605407752075495182120905913383202700133352036512251734298762827813961316721993714755024570196662081751962199426605561965908700795142328884453320004957927439510523380227879363825938787988977967975728062935549745883623609628476528277658518421234293140783526548388497602985573768427961345559633806598551903848790763497525502896203568188102677370277940284573285158549060758896546211293579558404026940367205027555949948805628204197714567186264693710099712904593150372754621524028812642542529410468855013374288043032172490785056367339782135489409486183311963470001571474595268553439958607398330842251665830969026744438788237722944524795549459052038937257628064307406124882229763844847835535075416126793875436472998064961646853322210015091288831022698386768489755846422158885967671250115905737356580081857455214732095380665148768986735002785642366427582440805234265944190152716730826492738778477935134215431637477214305220875927312135809104918253274131296458436530733618589941707032997825748567209394861357445817792611089457540040094573720547194260181348195949843069584745665702373107339072197837099588851295929577152805752201996680853602656945345282415472835767547619168506017288210480375403523129239414108462363929433477563408461200767054588830859151277033980735455669702134911200666081604354523549321428929066413430413589956788583974669596420267857614580359597175145416662814890299120623485734627687923251095531392337095350026139672133747146462640700844690523044588143195532808034929606656";

            var factory = BuildTestCaseFactory();

            factory.ExecuteParameterisedUnitTestForReproducedTypedTestCase(
                ParameterisedUnitTestForReassemblyOfPermutedMonotonicIncreasingSequenceByBuggySortingAlgorithm,
                reproduction);
        }
    }
}